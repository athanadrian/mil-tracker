generator client {
  provider   = "prisma-client-js"
  engineType = "binary" // για Electron packaging
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * ============== Enums ==============
 */

enum OrganizationType {
  GOVERNMENT
  MILITARY
  NGO
  OTHER
}

enum UnitType {
  HQ
  FORMATION
  UNIT
  SUBUNIT
  OTHER
}

enum EquipmentCategory {
  VEHICLE
  AIRCRAFT
  NAVAL
  WEAPON
  SENSOR
  COMMUNICATION
  AMMO
  SUPPORT
  OTHER
}

enum AssignmentStatus {
  ACTIVE
  IN_STORAGE
  RETIRED
  LOST
}

enum RankTier {
  ENLISTED
  OFFICER
  WARRANT
  OTHER
}

enum RelatedType {
  COUNTRY
  ORGANIZATION
  UNIT
  EQUIPMENT
  PERSON
  MEETING
  PERSON_POSTING
  COMPANY
  OTHER
}

enum PostingType {
  INITIAL
  TRANSFER
  TEMPORARY
  SECONDMENT
  TRAINING
  ATTACHMENT
}

enum ServiceStatus {
  ACTIVE
  RESERVE
  RETIRED
}

enum DocumentCategory {
  ATYPO
  DEPLI
  ENIMEROTIKO
}

enum DocumentAction {
  OUTGOING
  INCOMING
}

/**
 * ============== Models ==============
 */

model Country {
  id           String  @id @default(cuid())
  name         String  @unique
  iso2         String? @unique
  countryImage String?

  organizations   Organization[]
  branches        ServiceBranch[]
  people          Person[]
  units           Unit[]
  equipmentOrigin Equipment[]     @relation("EquipmentOriginCountry")
  meetings        Meeting[]
  postings        PersonPosting[]

  // Companies με HQ στη χώρα
  companies Company[]

  // Γραφεία εταιρειών στη χώρα
  companyOffices CompanyOffice[]
}

model Organization {
  id                String           @id @default(cuid())
  name              String
  type              OrganizationType
  organizationImage String?

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  // back-relations
  people   Person[]
  postings PersonPosting[]
  meetings Meeting[]

  // Συμμετοχές εταιρειών σε οργανισμό
  companyMembers CompanyOrganization[]
}

model Company {
  id           String   @id @default(cuid())
  name         String
  website      String?
  notes        String?
  companyImage String?
  // HQ χώρα
  hqCountry    Country? @relation(fields: [hqCountryId], references: [id])
  hqCountryId  String?

  // Offices σε άλλες χώρες
  offices CompanyOffice[]

  // Συμμετοχές σε οργανισμούς (N:M)
  memberships CompanyOrganization[]

  // Προσωπικό (π.χ. υπάλληλοι)
  people Person[]

  // Κατασκευαστής για equipment
  manufactured Equipment[] @relation("ManufacturerCompany")
}

model CompanyOffice {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  city      String?
  address   String?
  latitude  Float?
  longitude Float?

  @@index([companyId])
  @@index([countryId])
}

model CompanyOrganization {
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  role  String?
  since DateTime?
  until DateTime?

  @@id([companyId, organizationId])
}

model ServiceBranch {
  id        String   @id @default(cuid())
  name      String
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String
  people    Person[]
}

model Rank {
  id        String          @id @default(cuid())
  code      String?
  name      String
  tier      RankTier
  level     Int?
  rankImage String?
  people    Person[]
  postings  PersonPosting[]
}

model Person {
  id        String @id @default(cuid())
  firstName String
  lastName  String

  rank   Rank?   @relation(fields: [rankId], references: [id])
  rankId String?

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  // Ανήκει σε οργανισμό (π.χ. ΝΑΤΟ/Υπουργείο)
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  // ή/και εργάζεται σε εταιρεία
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  branch   ServiceBranch? @relation(fields: [branchId], references: [id])
  branchId String?

  email            String?
  phone            String?
  notes            String?
  personImagePaths Json?
  meetings         MeetingParticipant[]
  postings         PersonPosting[]
  status           ServiceStatus        @default(ACTIVE)
  retiredAt        DateTime?
}

model PersonPosting {
  id       String @id @default(cuid())
  person   Person @relation(fields: [personId], references: [id])
  personId String

  unit   Unit?   @relation(fields: [unitId], references: [id])
  unitId String?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  type         PostingType @default(TRANSFER)
  position     String?
  role         String?
  rankAtTime   Rank?       @relation(fields: [rankAtTimeId], references: [id])
  rankAtTimeId String?

  orderNumber String?
  orderDate   DateTime?

  startDate DateTime
  endDate   DateTime?
  notes     String?

  @@index([personId, startDate])
  @@index([unitId])
  @@index([organizationId])
}

model Unit {
  id        String   @id @default(cuid())
  name      String
  code      String?
  unitImage String?
  type      UnitType
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String
  parent    Unit?    @relation("UnitToSubunits", fields: [parentId], references: [id])
  parentId  String?
  subunits  Unit[]   @relation("UnitToSubunits")

  latitude  Float?
  longitude Float?

  equipmentAssignments EquipmentAssignment[]
  postings             PersonPosting[]

  @@index([latitude, longitude])
}

model Equipment {
  id       String            @id @default(cuid())
  name     String
  model    String?
  category EquipmentCategory

  // Κατασκευαστής: Company (ΟΧΙ Organization πλέον)
  manufacturer          Company? @relation(name: "ManufacturerCompany", fields: [manufacturerCompanyId], references: [id])
  manufacturerCompanyId String?

  // Χώρα προέλευσης
  countryOfOrigin     Country?              @relation(name: "EquipmentOriginCountry", fields: [countryOfOriginId], references: [id])
  countryOfOriginId   String?
  equipmentImagePaths Json?
  specs               Json?
  assignments         EquipmentAssignment[]
}

model EquipmentAssignment {
  id          String           @id @default(cuid())
  unit        Unit             @relation(fields: [unitId], references: [id])
  unitId      String
  equipment   Equipment        @relation(fields: [equipmentId], references: [id])
  equipmentId String
  quantity    Int              @default(1)
  status      AssignmentStatus @default(ACTIVE)
  notes       String?
}

model Meeting {
  id                String        @id @default(cuid())
  date              DateTime
  location          String?
  country           Country?      @relation(fields: [countryId], references: [id])
  countryId         String?
  organization      Organization? @relation(fields: [organizationId], references: [id])
  organizationId    String?
  summary           String?
  meetingImagePaths Json?

  topics       MeetingTopic[]
  participants MeetingParticipant[]
}

model MeetingTopic {
  id        String  @id @default(cuid())
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String
  title     String
  notes     String?
}

model MeetingParticipant {
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId String
  person    Person  @relation(fields: [personId], references: [id])
  personId  String
  role      String?
  notes     String?

  @@id([meetingId, personId])
}

model Document {
  id               String            @id @default(cuid())
  title            String
  filePath         String
  fileType         String?
  documentCategory DocumentCategory?
  documentAction   DocumentAction?
  size             Int?
  hash             String?
  addedAt          DateTime          @default(now())
  thumbnailPath    String?
  notes            String?
  links            DocumentLink[]
}

model DocumentLink {
  document    Document    @relation(fields: [documentId], references: [id])
  documentId  String
  relatedType RelatedType
  relatedId   String

  @@id([documentId, relatedType, relatedId])
}
