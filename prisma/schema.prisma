generator client {
  provider   = "prisma-client-js"
  engineType = "binary" // για Electron packaging
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/* ============== Enums ============== */

enum OrganizationType {
  GOVERNMENT
  MILITARY
  NGO
  OTHER

  @@map("organization_types")
}

enum UnitType {
  HQ
  FORMATION
  UNIT
  SUBUNIT
  OTHER

  @@map("unit_types")
}

enum PersonType {
  MILITARY
  CIVILIAN

  @@map("person_types")
}

enum EquipmentCategory {
  VEHICLE
  AIRCRAFT
  UAV
  USV
  UGV
  UUV
  SHIP
  NAVAL
  WEAPON
  SENSOR
  COMMUNICATION
  AMMO
  SUPPORT
  OTHER

  @@map("equipment_categories")
}

enum AssignmentStatus {
  ACTIVE
  IN_STORAGE
  RETIRED
  LOST

  @@map("assignment_statuses")
}

enum RankTier {
  ENLISTED
  OFFICER
  WARRANT
  OTHER

  @@map("rank_tiers")
}

enum RelatedType {
  COUNTRY
  ORGANIZATION
  UNIT
  EQUIPMENT
  PERSON
  MEETING
  PERSON_POSTING
  COMPANY
  OTHER

  @@map("related_types")
}

enum PostingType {
  INITIAL
  TRANSFER
  TEMPORARY
  SECONDMENT
  TRAINING
  ATTACHMENT

  @@map("posting_types")
}

enum ServiceStatus {
  ACTIVE
  RESERVE
  RETIRED

  @@map("service_statuses")
}

enum DocumentCategory {
  ATYPO
  DEPLI
  ENIMEROTIKO

  @@map("document_categories")
}

enum DocumentAction {
  OUTGOING
  INCOMING

  @@map("document_actions")
}

/* ============== Models ============== */

model Region {
  id          String    @id @default(cuid())
  title       String    @unique
  code        String?   @unique
  description String?
  countries   Country[]

  @@map("regions")
}

model Country {
  id           String  @id @default(cuid())
  name         String  @unique
  iso2         String? @unique
  countryImage String?
  flag         String?

  // Νέα σχέση: χώρα -> περιοχή
  region   Region? @relation(fields: [regionId], references: [id])
  regionId String?

  // back-relations
  organizations        Organization[]       // οργανισμοί με countryId (π.χ. έδρα)
  branches             ServiceBranch[]
  people               Person[]
  units                Unit[]
  equipmentOrigin      Equipment[]          @relation("EquipmentOriginCountry")
  meetings             Meeting[]
  postings             PersonPosting[]
  companies            Company[]            @relation("CompanyHqCountry")
  companyOffices       CompanyOffice[]
  organizationLinks    CountryOrganization[]

  @@map("countries")
}

model Organization {
  id                String           @id @default(cuid())
  name              String
  code              String?          @unique
  type              OrganizationType
  organizationImage String?

  country   Country? @relation(fields: [countryId], references: [id])
  countryId String?

  // back-relations
  people           Person[]
  postings         PersonPosting[]
  meetings         Meeting[]
  companyMembers   CompanyOrganization[]
  countryLinks     CountryOrganization[]

  @@map("organizations")
}

model Company {
  id           String   @id @default(cuid())
  name         String
  website      String?
  notes        String?
  companyImage String?

  // HQ χώρα
  hqCountry   Country? @relation("CompanyHqCountry", fields: [hqCountryId], references: [id])
  hqCountryId String?

  offices       CompanyOffice[]
  memberships   CompanyOrganization[]
  people        Person[]     // υπάλληλοι
  manufactured  Equipment[]  @relation("ManufacturerCompany")

  @@map("companies")
}

model CompanyOffice {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  city      String?
  address   String?
  latitude  Float?
  longitude Float?

  @@index([companyId])
  @@index([countryId])
  @@map("company_offices")
}

model CompanyOrganization {
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  role  String?
  since DateTime?
  until DateTime?

  @@id([companyId, organizationId])
  @@map("company_organizations")
}

model CountryOrganization {
  country        Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@id([countryId, organizationId])
  @@map("country_organizations")
}

model ServiceBranch {
  id        String  @id @default(cuid())
  name      String
  code      String? @unique
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  people     Person[]
  ranks      Rank[]
  specialties Specialty[]
  units      Unit[]

  @@index([countryId])
  @@map("branches")
}

model Rank {
  id        String          @id @default(cuid())
  code      String?         @unique
  name      String
  tier      RankTier
  level     Int?
  rankImage String?

  branch   ServiceBranch? @relation(fields: [branchId], references: [id])
  branchId String?

  people    Person[]
  postings  PersonPosting[]
  promotions Promotion[]

  @@index([branchId])
  @@map("ranks")
}

model Specialty {
  id          String         @id @default(cuid())
  title       String         @unique
  code        String?        @unique
  description String?

  branch   ServiceBranch? @relation(fields: [branchId], references: [id])
  branchId String?

  people   Person[]

  @@index([branchId])
  @@map("specialties")
}

model Position {
  id          String         @id @default(cuid())
  title       String         @unique
  code        String?        @unique
  description String?

  postings    PersonPosting[]

  @@map("positions")
}

model Person {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  nickname  String?

  rank     Rank?           @relation(fields: [rankId], references: [id])
  rankId   String?
  type     PersonType

  country   Country?       @relation(fields: [countryId], references: [id])
  countryId String?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  company   Company?       @relation(fields: [companyId], references: [id])
  companyId String?

  branch   ServiceBranch?  @relation(fields: [branchId], references: [id])
  branchId String?

  specialty Specialty?     @relation(fields: [specialtyId], references: [id])
  specialtyId String?

  email            String?
  phone            String?
  notes            String?
  personImagePaths Json?
  status           ServiceStatus @default(ACTIVE)
  retiredAt        DateTime?

  meetings   MeetingParticipant[]
  postings   PersonPosting[]
  promotions Promotion[]

  @@index([lastName, firstName])
  @@map("people")
}

model Promotion {
  id            String @id @default(cuid())
  person        Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String
  rank          Rank   @relation(fields: [rankId], references: [id])
  rankId        String
  promotionYear Int

  @@unique([personId, rankId, promotionYear])
  @@index([personId, promotionYear])
  @@map("promotions")
}

model Unit {
  id        String   @id @default(cuid())
  name      String
  code      String?  @unique
  unitImage String?
  type      UnitType

  country   Country  @relation(fields: [countryId], references: [id])
  countryId String

  branch    ServiceBranch? @relation(fields: [branchId], references: [id])
  branchId  String?

  parent    Unit?    @relation("UnitToSubunits", fields: [parentId], references: [id])
  parentId  String?
  subunits  Unit[]   @relation("UnitToSubunits")

  latitude  Float?
  longitude Float?

  equipmentAssignments EquipmentAssignment[]
  postings             PersonPosting[]

  @@index([countryId])
  @@index([branchId])
  @@index([latitude, longitude])
  @@map("units")
}

model Equipment {
  id       String            @id @default(cuid())
  name     String
  model    String?
  category EquipmentCategory

  manufacturer          Company? @relation(name: "ManufacturerCompany", fields: [manufacturerCompanyId], references: [id])
  manufacturerCompanyId String?

  countryOfOrigin     Country? @relation(name: "EquipmentOriginCountry", fields: [countryOfOriginId], references: [id])
  countryOfOriginId   String?
  equipmentImagePaths Json?
  specs               Json?

  assignments         EquipmentAssignment[]

  @@map("equipments")
}

model EquipmentAssignment {
  id          String           @id @default(cuid())
  unit        Unit             @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId      String
  equipment   Equipment        @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId String
  quantity    Int              @default(1)
  status      AssignmentStatus @default(ACTIVE)
  notes       String?

  @@index([unitId])
  @@index([equipmentId])
  @@map("equipment_assignments")
}

model Meeting {
  id                String        @id @default(cuid())
  date              DateTime
  location          String?
  country           Country?      @relation(fields: [countryId], references: [id])
  countryId         String?
  organization      Organization? @relation(fields: [organizationId], references: [id])
  organizationId    String?
  summary           String?
  meetingImagePaths Json?

  topics       MeetingTopic[]
  participants MeetingParticipant[]

  @@index([countryId])
  @@index([organizationId])
  @@map("meetings")
}

model MeetingTopic {
  id        String  @id @default(cuid())
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId String
  title     String
  notes     String?

  @@index([meetingId])
  @@map("meeting_topics")
}

model MeetingParticipant {
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId String
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  String
  role      String?
  notes     String?

  @@id([meetingId, personId])
  @@map("meeting_participants")
}

model PersonPosting {
  id         String        @id @default(cuid())
  person     Person        @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   String

  unit       Unit?         @relation(fields: [unitId], references: [id])
  unitId     String?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  country    Country?      @relation(fields: [countryId], references: [id])
  countryId  String?

  type         PostingType  @default(TRANSFER)

  // Σύνδεση με Position (π.χ. Επιτελής, Δκτης, κ.λπ.)
  position   Position?     @relation(fields: [positionId], references: [id])
  positionId String?

  role         String?
  rankAtTime   Rank?        @relation(fields: [rankAtTimeId], references: [id])
  rankAtTimeId String?

  orderNumber String?
  orderDate   DateTime?

  startDate   DateTime
  endDate     DateTime?

  // Επιπλέον για ευκολία, όπως στο παλιό schema
  installationYear Int?

  notes     String?

  @@index([personId, startDate])
  @@index([unitId])
  @@index([organizationId])
  @@index([countryId])
  @@index([positionId])
  @@map("installations")
}

model Document {
  id               String            @id @default(cuid())
  title            String
  filePath         String
  fileType         String?
  documentCategory DocumentCategory?
  documentAction   DocumentAction?
  size             Int?
  hash             String?
  addedAt          DateTime          @default(now())
  thumbnailPath    String?
  notes            String?

  links            DocumentLink[]

  @@map("documents")
}

model DocumentLink {
  document    Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  relatedType RelatedType
  relatedId   String

  @@id([documentId, relatedType, relatedId])
  @@map("document_links")
}

model Tag {
  id          String  @id @default(cuid())
  title       String
  description String?
  type        String
  // σύνθετη μοναδικότητα (όπως στο παλιό)
  @@unique([title, type])
  @@map("tags")
}
